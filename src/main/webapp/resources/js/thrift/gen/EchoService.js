//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

EchoService_put_args = function(args) {
  this.id = null;
  this.echoStr = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.echoStr !== undefined) {
      this.echoStr = args.echoStr;
    }
  }
};
EchoService_put_args.prototype = {};
EchoService_put_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.echoStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoService_put_args.prototype.write = function(output) {
  output.writeStructBegin('EchoService_put_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.echoStr !== null && this.echoStr !== undefined) {
    output.writeFieldBegin('echoStr', Thrift.Type.STRING, 2);
    output.writeString(this.echoStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EchoService_put_result = function(args) {
};
EchoService_put_result.prototype = {};
EchoService_put_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoService_put_result.prototype.write = function(output) {
  output.writeStructBegin('EchoService_put_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EchoService_get_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
EchoService_get_args.prototype = {};
EchoService_get_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoService_get_args.prototype.write = function(output) {
  output.writeStructBegin('EchoService_get_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EchoService_get_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
EchoService_get_result.prototype = {};
EchoService_get_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EchoService_get_result.prototype.write = function(output) {
  output.writeStructBegin('EchoService_get_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EchoServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
EchoServiceClient.prototype = {};
EchoServiceClient.prototype.put = function(id, echoStr, callback) {
  if (callback === undefined) {
    this.send_put(id, echoStr);
    this.recv_put();
  } else {
    var postData = this.send_put(id, echoStr, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_put);
  }
};

EchoServiceClient.prototype.send_put = function(id, echoStr, callback) {
  this.output.writeMessageBegin('put', Thrift.MessageType.CALL, this.seqid);
  var args = new EchoService_put_args();
  args.id = id;
  args.echoStr = echoStr;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EchoServiceClient.prototype.recv_put = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EchoService_put_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
EchoServiceClient.prototype.get = function(id, callback) {
  if (callback === undefined) {
    this.send_get(id);
    return this.recv_get();
  } else {
    var postData = this.send_get(id, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_get);
  }
};

EchoServiceClient.prototype.send_get = function(id, callback) {
  this.output.writeMessageBegin('get', Thrift.MessageType.CALL, this.seqid);
  var args = new EchoService_get_args();
  args.id = id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

EchoServiceClient.prototype.recv_get = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new EchoService_get_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'get failed: unknown result';
};
